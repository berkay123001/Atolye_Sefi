# tools/callback_handlers.py

from langchain_core.callbacks.base import BaseCallbackHandler
from langchain_core.agents import AgentAction, AgentFinish
from typing import Any
from queue import Queue
import json

class StreamingGradioCallbackHandler(BaseCallbackHandler):
    """
    LangChain ajanÄ±n adÄ±mlarÄ±nÄ± yakalayan nihai callback handler.
    ArtÄ±k basit sohbetleri (araÃ§sÄ±z) ve araÃ§ kullanÄ±lan gÃ¶revleri
    ayÄ±rt edip, her ikisini de ÅŸeffaf bir ÅŸekilde loglayabiliyor.
    """

    def __init__(self, q: Queue):
        """
        Handler'Ä± bir kuyruk nesnesi ile baÅŸlatÄ±r ve bir durum bayraÄŸÄ± ekler.
        """
        self.q = q
        # AjanÄ±n bir araÃ§ kullanÄ±p kullanmadÄ±ÄŸÄ±nÄ± takip etmek iÃ§in bir bayrak.
        self.tool_used = False

    def on_agent_action(self, action: AgentAction, **kwargs: Any) -> Any:
        """
        Ajan bir "Eylem" aldÄ±ÄŸÄ±nda (yani bir aracÄ± kullanmaya karar verdiÄŸinde) tetiklenir.
        """
        # Eylem gerÃ§ekleÅŸtiÄŸinde, bir aracÄ±n kullanÄ±ldÄ±ÄŸÄ±nÄ± iÅŸaretliyoruz.
        self.tool_used = True
        
        # AjanÄ±n dÃ¼ÅŸÃ¼ncesini ve eylemini formatlayÄ±p kuyruÄŸa ekliyoruz.
        log_message = f"ğŸ¤” **DÃ¼ÅŸÃ¼nce & Eylem:**\n\n```text\n{action.log.strip()}\n```\n\n"
        self.q.put(log_message)

    def on_tool_end(self, output: str, **kwargs: Any) -> Any:
        """
        Bir araÃ§ Ã§alÄ±ÅŸmasÄ±nÄ± bitirdiÄŸinde ve bir "GÃ¶zlem" Ã¼rettiÄŸinde tetiklenir.
        """
        # GÃ¶zlem sonucunu formatlayÄ±p kuyruÄŸa ekliyoruz.
        # Ã‡Ä±ktÄ±nÄ±n JSON olup olmadÄ±ÄŸÄ±nÄ± kontrol ederek daha gÃ¼venli hale getiriyoruz.
        try:
            # Ã‡Ä±ktÄ± bir JSON string ise, daha gÃ¼zel formatlayalÄ±m.
            parsed_output = json.loads(output)
            formatted_output = json.dumps(parsed_output, indent=2, ensure_ascii=False)
            log_message = f"ğŸ”¬ **GÃ¶zlem:**\n\n```json\n{formatted_output}\n```\n"
        except json.JSONDecodeError:
            # EÄŸer JSON deÄŸilse, dÃ¼z metin olarak ekleyelim.
            log_message = f"ğŸ”¬ **GÃ¶zlem:**\n\n```text\n{output}\n```\n"

        self.q.put(log_message)

    def on_agent_finish(self, finish: AgentFinish, **kwargs: Any) -> Any:
        """
        Ajan gÃ¶revini tamamladÄ±ÄŸÄ±nda tetiklenir.
        """
        # ArtÄ±k hem basit sohbetlerdeki son dÃ¼ÅŸÃ¼nceyi hem de araÃ§ kullanÄ±lan
        # gÃ¶revlerin tamamlandÄ±ÄŸÄ±nÄ± logluyoruz.
        if self.tool_used:
            # EÄŸer bir araÃ§ kullanÄ±ldÄ±ysa, gÃ¶revin tamamlandÄ±ÄŸÄ±nÄ± belirt.
            log_message = "\nâœ… **GÃ¶rev TamamlandÄ±.** Nihai cevap Ã¼retildi."
        else:
            # EÄŸer hiÃ§ araÃ§ kullanmadÄ±ysa (basit sohbet), sadece son dÃ¼ÅŸÃ¼ncesini logla.
            log_message = f"ğŸ¤” **Son DÃ¼ÅŸÃ¼nce:**\n\n```text\n{finish.log.strip()}\n```"
        
        self.q.put(log_message)
        
        # Her gÃ¶rev bittiÄŸinde, bir sonraki gÃ¶rev iÃ§in bayraÄŸÄ± sÄ±fÄ±rla.
        self.tool_used = False

